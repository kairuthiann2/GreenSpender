    openapi: 3.0.0
    info: 
      title: GreenSpender API Documentation
      version: 1.0.0
      description: API documentation for the GreenSpender app
      contact: 
        name: Ann Kairuthi
        email: kairuthiann2@gmail.com
    servers: 
      - url: http://localhost:{process.env.port}
        description: Local Development Server

    paths:
      /api/v1/register:
       post:
         summary: Register the user
         description: Create a new user by providing email, username, and password. If the user alredy exists, it returns an error.
         requestBody:
           description: The user registration data
           required: true
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   email:
                     type: string
                     example: user@example.com
                   username:
                     type: string
                     example: exampleUser
                   password:
                   type: string
                   format: password
                   example: password123
            
             responses:
               200:
                 description: User registered successffully
                 content:
                   application/json:
                     schema:
                       type: string
                       example: User created successfully
               409:
                 description: conflict - User already exists
                 content:
                   application/json:
                     schema:
                       type: string
                       example: User already exists
                
               500:
                 description: Internal Server Error
                 content:
                   application/json:
                     schema:
                       type: string
                       example: Internal Server Error
                
      /api/v1/login:
       post:
         summary: user login
         description: Authenticate a user by validating their email and password. Returns a JWT token upon successfull authentication.
         requestBody:
           description: User login credentials
           required: true
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   email:
                     type: string
                     example: user@example.com
                   username:
                     type: string
                     example: exampleUser
                   password:
                   type: string
                   format: password
                   example: password123
            
             responses:
               200:
                 description: User logged in successffully
                 content:
                   application/json:
                     schema:
                       type: string
                       example: your_jwt_token_here
               400:
                 description: Invalid email or password
                 content:
                   application/json:
                     schema:
                       type: string
                       example: Invalid email or password
                
               404:
                 description: User not found
                 content:
                   application/json:
                     schema:
                       type: string
                       example: User not found
                
               500:
                 description: Internal Server Error
                 content:
                   application/json:
                     schema:
                       type: string
                       example: Internal Server Error
                
      /api/v1/logout:
       post:
         summary: Log out the user
         description: Invalidate the JWT token by removing it from the session and clearing it from the client.     
         responses:
           200:
             description: Successfully logged out
             content:
               application/json:
                 schema:
                   type: object
                   properties:
                     message: 
                       type: string
                       example: Logged out successfully
             500:
               description: Error occurred during logout          
       
       /api/v1/expenses/add_expense:
         post:
           summary: Add new expense
           description: Adds a new expense entry for the authenticated user.
           security:
             - bearerAuth: []
           requestBody:
             description: Expense details
             required: true
             content:
               application/json:
                 schema:
                   type: object
                   properties:
                     amount:
                       type: number
                       example: 500.75
                     date:
                       type: string
                       format: date
                       example: '2024-10-18'
                     category:
                       type: string
                       example: 'Food'
                     description:
                       type: string
                       example: 'Lunch ata local restaurant'

               responses: 
                 200:
                   description: Expense added successfully
                   content:
                     application/json:
                       schema: 
                         type: string
                         example: Expense added successfully
                         
                 500:
                   description: Internal server Error
                   content:
                     application/json:
                       schema: 
                         type: string
                         example: Internal server Error

       /api/v1/expenses/view_expense/{user_id}:
         get:
           summary: View user expenses
           description: Retrieve all expenses for a specific user.
           security:
             - bearerAuth: []
           parameters:
             - name: user_id
               in: path
               required: true
               description:
                 schema:
                   type: integer
                   example: 1

               responses: 
                 200:
                   description: List of examples
                   content:
                     application/json:
                       schema: 
                         type: array
                         items:
                           type: object
                           properties:
                             id: 
                               type: integer
                               example: 1
                             amount:
                               type: number
                               example: 100.59
                             date:
                               type: string
                               example: Food
                             description:
                               type: string
                               example: 'Lunch at a local restaurant'
                         
                 500:
                   description: Internal server Error
                   content:
                     application/json:
                       schema: 
                         type: string
                         example: Internal server Error

       /api/v1/expenses/edit_expense/{id}:
         put:
           summary: Edit an existing expense
           description: Update an expense entry by its ID.
           security:
             - bearerAuth: []
           parameters:
             - name: id
               in: path
               required: true
               description: ID of the expense to edit
               schema:
                   type: integer
                   example: 1
               requestBody:
                 description: Updated expense details
                 required: true
                 content: 
                   application/json:
                     schema:
                       type: object
                       properties:
                         amount: 
                           type: number
                           example: 75.00
                         date: 
                           type: string
                           format: date
                           example: '2024-10-19'
                         category: 
                           type: string
                           example: Transoportation
                         description: 
                           type: string
                           example: 'Bus fare'


               responses: 
                 200:
                   description: Expense updated successfully
                   content:
                     application/json:
                       schema: 
                         type: string
                         example: Expense updated successfully
                     
                 500:
                   description: Internal server Error
                   content:
                     application/json:
                       schema: 
                         type: string
                         example: Internal server Error

       /api/v1/expenses/edit_expense/{id}:
         get:
           summary: Fetch a single expense by ID
           description: Retrieve a specific expense by its ID.
           security:
             - bearerAuth: []
           parameters:
             - name: id
               in: path
               required: true
               description: ID of the expense to fetch
               schema:
                   type: integer
                   example: 1
              
               responses: 
                 200:
                   description: Fetched expense details
                   content:
                     application/json:
                       schema: 
                         type: object
                         properties:
                           id:
                             type: integer
                             example: 1
                             user_id: 
                               type: integer
                               example: 1
                             amount: 
                               type: number
                               example: 50.75
                             date: 
                               type: string
                               format: date
                               example: '2024-10-18'
                             category: 
                               type: string
                               example: Food
                             description: 
                               type: string
                               example: 'Lunch at a local restaurant'
                     
                 500:
                   description: Internal server Error
                   content:
                     application/json:
                       schema: 
                         type: string
                         example: Internal server Error


       /api/v1/expenses/delete_expense/{id}:
         delete:
           summary: Delete an expense
           description: Remove an expense by its ID
           security:
             - bearerAuth: []
           parameters:
             - name: id
               in: path
               required: true
               description: ID of the expense to delete
               schema:
                  type: integer
                  example: 1
                     
      responses: 
        200:
          description: Expense deleted successfully
          content:
            application/json:
              schema: 
                type: string
                example: Expense deleted successfully

        500:
          description: Internal server Error
          content:
            application/json:
              schema: 
                type: string
                example: Internal server Error

      /api/v1/impact-metrics:
        get:
           summary: Fetch environmental impact metrics
           description: Retrive environmental impact metrics such carbonemissions, waste generated, water usage, and energy consumption for the authenticated user.
           security:
             - bearerAuth: []
                     
      responses: 
        200:
          description: Successfully fetched impact metrics
          content:
            application/json:
              schema: 
                type: object
                properties:
                  totalSpent:
                    type: number
                    decsription: The total amount of money spent by the user.
                    example: 500:50
                  carbonEmissions:
                    type: number
                    decsription: Estimated carbon emissions based on user spending.
                    example: 250:50
                  wasteGenerated:
                    type: number
                    decsription: Estimated waste generated based on user spending.
                    example: 300:50
                  waterUsage:
                    type: number
                    decsription: Estimated water usage based on user spending.
                    example: 400:50
                  energyConsumption:
                    type: number
                    description: Estimated energy consumption based on user spending.
                    example: 500
                  
        500:
          description: Internal server Error while fetching metrics data
          content:
            application/json:
              schema: 
                type: string
                example: Internal server Error while fetching metrics data




        




      
     
    
